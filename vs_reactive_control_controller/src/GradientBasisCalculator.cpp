#include "vs_reactive_control_controller/GradientBasisCalculator.hpp"

#include "vs_reactive_control_controller/Controller.hpp"
#include "vs_reactive_control_controller/FeatureData.hpp"

#include <geometry_msgs/TwistStamped.h>
#include "geometry_msgs/Twist.h"
#include "mavros_msgs/PositionTarget.h"
#include "std_msgs/Float64.h"
#include "std_msgs/Float64MultiArray.h"

#include "img_seg_cnn/PredData.h"
#include "img_seg_cnn/PolyCalcCustom.h"
#include "img_seg_cnn/PolyCalcCustomTF.h"

#include <thread>
#include <vector>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <stdio.h>
#include <math.h>
#include <cmath>
#include <eigen3/Eigen/Dense>

using namespace std;
using namespace Eigen;

namespace vs_reactive_control_controller
{
  Eigen::MatrixXd GradientBasisCalculator::grad_basis_x1(Eigen::VectorXd x)
  {
    MatrixXd B_x1;
    B_x1.setZero(1, 75);

    B_x1(0, 0) = 0.0;
    B_x1(0, 1) = 1.0;
    B_x1(0, 2) = 0.0;
    B_x1(0, 3) = 0.0;
    B_x1(0, 4) = 0.0;
    B_x1(0, 5) = x(1);
    B_x1(0, 6) = x(2);
    B_x1(0, 7) = x(3);
    B_x1(0, 8) = 0.0;
    B_x1(0, 9) = 0.0;
    B_x1(0, 10) = 0.0;
    B_x1(0, 11) = 2 * x(0);
    B_x1(0, 12) = 0.0;
    B_x1(0, 13) = 0.0;
    B_x1(0, 14) = 0.0;
    B_x1(0, 15) = 2 * x(0) * x(1);
    B_x1(0, 16) = 2 * x(0) * x(2);
    B_x1(0, 17) = 2 * x(0) * x(3);
    B_x1(0, 18) = pow(x(1), 2);
    B_x1(0, 19) = 0.0;
    B_x1(0, 20) = 0.0;
    B_x1(0, 21) = pow(x(2), 2);
    B_x1(0, 22) = 0.0;
    B_x1(0, 23) = 0.0;
    B_x1(0, 24) = pow(x(3), 2);
    B_x1(0, 25) = 0.0;
    B_x1(0, 26) = 0.0;
    B_x1(0, 27) = 3 * pow(x(0), 2);
    B_x1(0, 28) = 0.0;
    B_x1(0, 29) = 0.0;
    B_x1(0, 30) = 0.0;
    B_x1(0, 31) = 3 * pow(x(0), 2) * x(1);
    B_x1(0, 32) = 3 * pow(x(0), 2) * x(2);
    B_x1(0, 33) = 3 * pow(x(0), 2) * x(3);
    B_x1(0, 34) = pow(x(1), 3);
    B_x1(0, 35) = 0.0;
    B_x1(0, 36) = 0.0;
    B_x1(0, 37) = pow(x(2), 3);
    B_x1(0, 38) = 0.0;
    B_x1(0, 39) = 0.0;
    B_x1(0, 40) = pow(x(3), 3);
    B_x1(0, 41) = 0.0;
    B_x1(0, 42) = 0.0;
    B_x1(0, 43) = 3 * pow(x(0), 2) * pow(x(1), 2);
    B_x1(0, 44) = 3 * pow(x(0), 2) * pow(x(2), 2);
    B_x1(0, 45) = 3 * pow(x(0), 2) * pow(x(3), 2);
    B_x1(0, 46) = 2 * pow(x(1), 3) * x(0);
    B_x1(0, 47) = 0.0;
    B_x1(0, 48) = 0.0;
    B_x1(0, 49) = 2 * pow(x(2), 3) * x(0);
    B_x1(0, 50) = 0.0;
    B_x1(0, 51) = 0.0;
    B_x1(0, 52) = 2 * pow(x(3), 3) * x(0);
    B_x1(0, 53) = 0.0;
    B_x1(0, 54) = 0.0;
    B_x1(0, 55) = 4 * pow(x(0), 3);
    B_x1(0, 56) = 0.0;
    B_x1(0, 57) = 0.0;
    B_x1(0, 58) = 0.0;
    B_x1(0, 59) = 4 * pow(x(0), 3) * x(1);
    B_x1(0, 60) = 4 * pow(x(0), 3) * x(2);
    B_x1(0, 61) = 4 * pow(x(0), 3) * x(3);
    B_x1(0, 62) = pow(x(1), 4);
    B_x1(0, 63) = 0.0;
    B_x1(0, 64) = 0.0;
    B_x1(0, 65) = pow(x(2), 4);
    B_x1(0, 66) = 0.0;
    B_x1(0, 67) = 0.0;
    B_x1(0, 68) = pow(x(3), 4);
    B_x1(0, 69) = 0.0;
    B_x1(0, 70) = 0.0;
    B_x1(0, 71) = 5 * pow(x(0), 4);
    B_x1(0, 72) = 0.0;
    B_x1(0, 73) = 0.0;
    B_x1(0, 74) = 0.0;

    return B_x1;
  }

  Eigen::MatrixXd GradientBasisCalculator::grad_basis_x2(Eigen::VectorXd x)
  {
    MatrixXd B_x2;
    B_x2.setZero(1, 75);

    B_x2(0, 0) = 0.0;
    B_x2(0, 1) = 0.0;
    B_x2(0, 2) = 1.0;
    B_x2(0, 3) = 0.0;
    B_x2(0, 4) = 0.0;
    B_x2(0, 5) = x(0);
    B_x2(0, 6) = 0.0;
    B_x2(0, 7) = 0.0;
    B_x2(0, 8) = x(2);
    B_x2(0, 9) = x(3);
    B_x2(0, 10) = 0.0;
    B_x2(0, 11) = 0.0;
    B_x2(0, 12) = 2 * x(1);
    B_x2(0, 13) = 0.0;
    B_x2(0, 14) = 0.0;
    B_x2(0, 15) = pow(x(0), 2);
    B_x2(0, 16) = 0.0;
    B_x2(0, 17) = 0.0;
    B_x2(0, 18) = 2 * x(1) * x(0);
    B_x2(0, 19) = 2 * x(1) * x(2);
    B_x2(0, 20) = 2 * x(1) * x(3);
    B_x2(0, 21) = 0.0;
    B_x2(0, 22) = pow(x(2), 2);
    B_x2(0, 23) = 0.0;
    B_x2(0, 24) = 0.0;
    B_x2(0, 25) = pow(x(3), 2);
    B_x2(0, 26) = 0.0;
    B_x2(0, 27) = 0.0;
    B_x2(0, 28) = 3 * pow(x(1), 2);
    B_x2(0, 29) = 0.0;
    B_x2(0, 30) = 0.0;
    B_x2(0, 31) = pow(x(0), 3);
    B_x2(0, 32) = 0.0;
    B_x2(0, 33) = 0.0;
    B_x2(0, 34) = 3 * pow(x(1), 2) * x(0);
    B_x2(0, 35) = 3 * pow(x(1), 2) * x(2);
    B_x2(0, 36) = 3 * pow(x(1), 2) * x(3);
    B_x2(0, 37) = 0.0;
    B_x2(0, 38) = pow(x(2), 3);
    B_x2(0, 39) = 0.0;
    B_x2(0, 40) = 0.0;
    B_x2(0, 41) = pow(x(3), 3);
    B_x2(0, 42) = 0.0;
    B_x2(0, 43) = 2 * pow(x(0), 3) * x(1);
    B_x2(0, 44) = 0.0;
    B_x2(0, 45) = 0.0;
    B_x2(0, 46) = 3 * pow(x(1), 2) * pow(x(0), 2);
    B_x2(0, 47) = 3 * pow(x(1), 2) * pow(x(2), 2);
    B_x2(0, 48) = 3 * pow(x(1), 2) * pow(x(3), 2);
    B_x2(0, 49) = 0.0;
    B_x2(0, 50) = 2 * pow(x(2), 3) * x(1);
    B_x2(0, 51) = 0.0;
    B_x2(0, 52) = 0.0;
    B_x2(0, 53) = 2 * pow(x(3), 3) * x(1);
    B_x2(0, 54) = 0.0;
    B_x2(0, 55) = 0.0;
    B_x2(0, 56) = 4 * pow(x(1), 3);
    B_x2(0, 57) = 0.0;
    B_x2(0, 58) = 0.0;
    B_x2(0, 59) = pow(x(0), 4);
    B_x2(0, 60) = 0.0;
    B_x2(0, 61) = 0.0;
    B_x2(0, 62) = 4 * pow(x(1), 3) * x(0);
    B_x2(0, 63) = 4 * pow(x(1), 3) * x(2);
    B_x2(0, 64) = 4 * pow(x(1), 3) * x(3);
    B_x2(0, 65) = 0.0;
    B_x2(0, 66) = pow(x(2), 4);
    B_x2(0, 67) = 0.0;
    B_x2(0, 68) = 0.0;
    B_x2(0, 69) = pow(x(3), 4);
    B_x2(0, 70) = 0.0;
    B_x2(0, 71) = 0.0;
    B_x2(0, 72) = 5 * pow(x(1), 4);
    B_x2(0, 73) = 0.0;
    B_x2(0, 74) = 0.0;

    return B_x2;
  }

  Eigen::MatrixXd GradientBasisCalculator::grad_basis_x3(Eigen::VectorXd x)
  {
    MatrixXd B_x3;
    B_x3.setZero(1, 75);

    B_x3(0, 0) = 0.0;
    B_x3(0, 1) = 0.0;
    B_x3(0, 2) = 0.0;
    B_x3(0, 3) = 1.0;
    B_x3(0, 4) = 0.0;
    B_x3(0, 5) = 0.0;
    B_x3(0, 6) = x(0);
    B_x3(0, 7) = 0.0;
    B_x3(0, 8) = x(1);
    B_x3(0, 9) = 0.0;
    B_x3(0, 10) = x(3);
    B_x3(0, 11) = 0.0;
    B_x3(0, 12) = 0.0;
    B_x3(0, 13) = 2 * x(2);
    B_x3(0, 14) = 0.0;
    B_x3(0, 15) = 0.0;
    B_x3(0, 16) = pow(x(0), 2);
    B_x3(0, 17) = 0.0;
    B_x3(0, 18) = 0.0;
    B_x3(0, 19) = pow(x(1), 2);
    B_x3(0, 20) = 0.0;
    B_x3(0, 21) = 2 * x(2) * x(0);
    B_x3(0, 22) = 2 * x(2) * x(1);
    B_x3(0, 23) = 2 * x(2) * x(3);
    B_x3(0, 24) = 0.0;
    B_x3(0, 25) = 0.0;
    B_x3(0, 26) = pow(x(3), 2);
    B_x3(0, 27) = 0.0;
    B_x3(0, 28) = 0.0;
    B_x3(0, 29) = 3 * pow(x(2), 2);
    B_x3(0, 30) = 0.0;
    B_x3(0, 31) = 0.0;
    B_x3(0, 32) = pow(x(0), 3);
    B_x3(0, 33) = 0.0;
    B_x3(0, 34) = 0.0;
    B_x3(0, 35) = pow(x(1), 3);
    B_x3(0, 36) = 0.0;
    B_x3(0, 37) = 3 * pow(x(2), 2) * x(0);
    B_x3(0, 38) = 3 * pow(x(2), 2) * x(1);
    B_x3(0, 39) = 3 * pow(x(2), 2) * x(3);
    B_x3(0, 40) = 0.0;
    B_x3(0, 41) = 0.0;
    B_x3(0, 42) = pow(x(3), 3);
    B_x3(0, 43) = 0.0;
    B_x3(0, 44) = 2 * pow(x(0), 3) * x(2);
    B_x3(0, 45) = 0.0;
    B_x3(0, 46) = 0.0;
    B_x3(0, 47) = 2 * pow(x(1), 3) * x(2);
    B_x3(0, 48) = 0.0;
    B_x3(0, 49) = 3 * pow(x(2), 2) * pow(x(0), 2);
    B_x3(0, 50) = 3 * pow(x(2), 2) * pow(x(1), 2);
    B_x3(0, 51) = 3 * pow(x(2), 2) * pow(x(3), 2);
    B_x3(0, 52) = 0.0;
    B_x3(0, 53) = 0.0;
    B_x3(0, 54) = 2 * pow(x(3), 3) * x(2);
    B_x3(0, 55) = 0.0;
    B_x3(0, 56) = 0.0;
    B_x3(0, 57) = 4 * pow(x(2), 3);
    B_x3(0, 58) = 0.0;
    B_x3(0, 59) = 0.0;
    B_x3(0, 60) = pow(x(0), 4);
    B_x3(0, 61) = 0.0;
    B_x3(0, 62) = 0.0;
    B_x3(0, 63) = pow(x(1), 4);
    B_x3(0, 64) = 0.0;
    B_x3(0, 65) = 4 * pow(x(2), 3) * x(0);
    B_x3(0, 66) = 4 * pow(x(2), 3) * x(1);
    B_x3(0, 67) = 4 * pow(x(2), 3) * x(3);
    B_x3(0, 68) = 0.0;
    B_x3(0, 69) = 0.0;
    B_x3(0, 70) = pow(x(3), 4);
    B_x3(0, 71) = 0.0;
    B_x3(0, 72) = 0.0;
    B_x3(0, 73) = 5 * pow(x(2), 4);
    B_x3(0, 74) = 0.0;

    return B_x3;
  }

  Eigen::MatrixXd GradientBasisCalculator::grad_basis_x4(Eigen::VectorXd x)
  {
    MatrixXd B_x4;
    B_x4.setZero(1, 75);

    B_x4(0, 0) = 0.0;
    B_x4(0, 1) = 0.0;
    B_x4(0, 2) = 0.0;
    B_x4(0, 3) = 0.0;
    B_x4(0, 4) = 1.0;
    B_x4(0, 5) = 0.0;
    B_x4(0, 6) = 0.0;
    B_x4(0, 7) = x(3);
    B_x4(0, 8) = 0.0;
    B_x4(0, 9) = x(1);
    B_x4(0, 10) = x(2);
    B_x4(0, 11) = 0.0;
    B_x4(0, 12) = 0.0;
    B_x4(0, 13) = B_x4(0, 0) = 0.0;
    B_x4(0, 14) = 2 * x(3);
    B_x4(0, 15) = 0.0;
    B_x4(0, 16) = 0.0;
    B_x4(0, 17) = pow(x(0), 2);
    B_x4(0, 18) = 0.0;
    B_x4(0, 19) = 0.0;
    B_x4(0, 20) = pow(x(1), 2);
    B_x4(0, 21) = 0.0;
    B_x4(0, 22) = 0.0;
    B_x4(0, 23) = pow(x(2), 2);
    B_x4(0, 24) = 2 * x(3) * x(0);
    B_x4(0, 25) = 2 * x(3) * x(1);
    B_x4(0, 26) = 2 * x(3) * x(2);
    B_x4(0, 27) = 0.0;
    B_x4(0, 28) = 0.0;
    B_x4(0, 29) = 0.0;
    B_x4(0, 30) = 3 * pow(x(3), 2);
    B_x4(0, 31) = 0.0;
    B_x4(0, 32) = 0.0;
    B_x4(0, 33) = pow(x(0), 3);
    B_x4(0, 34) = 0.0;
    B_x4(0, 35) = 0.0;
    B_x4(0, 36) = pow(x(1), 3);
    B_x4(0, 37) = 0.0;
    B_x4(0, 38) = 0.0;
    B_x4(0, 39) = pow(x(2), 3);
    B_x4(0, 40) = 3 * pow(x(3), 2) * x(0);
    B_x4(0, 41) = 3 * pow(x(3), 2) * x(1);
    B_x4(0, 42) = 3 * pow(x(3), 2) * x(2);
    B_x4(0, 43) = 0.0;
    B_x4(0, 44) = 0.0;
    B_x4(0, 45) = 2 * pow(x(0), 3) * x(3);
    B_x4(0, 46) = 0.0;
    B_x4(0, 47) = 0.0;
    B_x4(0, 48) = 2 * pow(x(1), 3) * x(3);
    B_x4(0, 49) = 0.0;
    B_x4(0, 50) = 0.0;
    B_x4(0, 51) = 2 * pow(x(2), 3) * x(3);
    B_x4(0, 52) = 3 * pow(x(3), 2) * pow(x(0), 2);
    B_x4(0, 53) = 3 * pow(x(3), 2) * pow(x(1), 2);
    B_x4(0, 54) = 3 * pow(x(3), 2) * pow(x(2), 2);
    B_x4(0, 55) = 0.0;
    B_x4(0, 56) = 0.0;
    B_x4(0, 57) = 0.0;
    B_x4(0, 58) = 4 * pow(x(3), 3);
    B_x4(0, 59) = 0.0;
    B_x4(0, 60) = 0.0;
    B_x4(0, 61) = pow(x(0), 4);
    B_x4(0, 62) = 0.0;
    B_x4(0, 63) = 0.0;
    B_x4(0, 64) = pow(x(1), 4);
    B_x4(0, 65) = 0.0;
    B_x4(0, 66) = 0.0;
    B_x4(0, 67) = pow(x(2), 4);
    B_x4(0, 68) = 4 * pow(x(3), 3) * x(0);
    B_x4(0, 69) = 4 * pow(x(3), 3) * x(1);
    B_x4(0, 70) = 4 * pow(x(3), 3) * x(2);
    B_x4(0, 71) = 0.0;
    B_x4(0, 72) = 0.0;
    B_x4(0, 73) = 0.0;
    B_x4(0, 74) = 5 * pow(x(3), 4);

    return B_x4;
  }
} // namespace vs_reactive_control_controller
